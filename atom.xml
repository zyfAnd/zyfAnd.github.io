<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Duzhang</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-07T12:18:32.432Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zyf&amp;&amp;JJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>山水风景</title>
    <link href="http://yoursite.com/2016/09/07/%E5%B1%B1%E6%B0%B4%E9%A3%8E%E6%99%AF/"/>
    <id>http://yoursite.com/2016/09/07/山水风景/</id>
    <published>2016-09-07T11:39:07.000Z</published>
    <updated>2016-09-07T12:18:32.432Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p><img src="http://img02.tooopen.com/images/20151229/tooopen_sy_153057917287.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://img02.tooopen.com/images/20151229/tooopen_sy_153057917287.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>递归算法学习之蛙跳问题——01</title>
    <link href="http://yoursite.com/2016/06/15/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%9B%99%E8%B7%B3%E9%97%AE%E9%A2%98%E2%80%94%E2%80%9401/"/>
    <id>http://yoursite.com/2016/06/15/递归算法学习之蛙跳问题——01/</id>
    <published>2016-06-15T02:21:00.000Z</published>
    <updated>2016-09-07T12:24:34.915Z</updated>
    
    <content type="html"><![CDATA[<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。<br><a id="more"></a><br>public void jumpFloor(int n)<br>{<br>    if(n&lt;=0) return 0;<br>    else if(n&lt;=2) return n;<br>    else{<br>       return jumpFloor(n-1)+jumpFloor(n-2);<br>    }<br>}<br>用递归的方式来接到题目<br>台阶数目：1 2 3 4 5 6<br>跳法种数：1 2 3 5 8 13<br>所以这满足斐波拉契的公式所以可以用递归来处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法学习之递归算法学习之斐波拉契</title>
    <link href="http://yoursite.com/2016/06/15/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91/"/>
    <id>http://yoursite.com/2016/06/15/算法学习之递归算法学习之斐波拉契/</id>
    <published>2016-06-15T02:21:00.000Z</published>
    <updated>2016-09-07T12:29:20.155Z</updated>
    
    <content type="html"><![CDATA[<p>输出Fibonacci的第n项，要求时间复杂度要低<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public int  fibonacci(int n)</div><div class="line">&#123;</div><div class="line">if(n&lt;0) return 0;</div><div class="line">  if(n&lt;=2) return 1;</div><div class="line">  else&#123;</div><div class="line">      return fibonacci(n-1)+fibonacci(n-2);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>但是这种递归方法的时间复杂度太高</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public int fibonacci_01(int n)</div><div class="line">&#123;</div><div class="line">    if(n&lt;0) return 0;</div><div class="line">    else if((n&lt;=2) return 1;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">               int a = 1,b = 1,c = 0;</div><div class="line">       for(int i = 0;i&lt;=n;i++)</div><div class="line">       &#123;</div><div class="line">          c = a + b;</div><div class="line">          a = b;</div><div class="line">         b = c;</div><div class="line">       &#125;</div><div class="line">       return c;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样改变之后时间复杂度就变成了O(n)了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;输出Fibonacci的第n项，要求时间复杂度要低&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
