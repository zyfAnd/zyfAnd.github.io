<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Duzhang</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zyfand.github.io/"/>
  <updated>2017-12-06T04:51:32.062Z</updated>
  <id>https://zyfand.github.io/</id>
  
  <author>
    <name>zyf&amp;&amp;JJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务器搭建（1）</title>
    <link href="https://zyfand.github.io/2017/12/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%881%EF%BC%89/"/>
    <id>https://zyfand.github.io/2017/12/06/服务器搭建（1）/</id>
    <published>2017-12-06T04:51:31.000Z</published>
    <updated>2017-12-06T04:51:32.062Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos_Nginx_configuration</title>
    <link href="https://zyfand.github.io/2017/12/05/Centos-Nginx-configuration/"/>
    <id>https://zyfand.github.io/2017/12/05/Centos-Nginx-configuration/</id>
    <published>2017-12-05T03:48:26.000Z</published>
    <updated>2017-12-13T15:07:43.544Z</updated>
    
    <content type="html"><![CDATA[<p>##Nginx:</p>
<p>nginx 是一个用C语言编写的静态服务器。<br>我们可以用它来做反向代理。</p>
<a id="more"></a>
<p>案例1：</p>
<p>一个网站的访问量很大，如果很大的数据量都用一台服务器来处理，那么就会导致服务器主机压力很大，甚至导致奔溃。</p>
<p>例如全球都可以访问（当然天朝大不认还是上不了的..） www.google.com ，那么就可以用nginx做分发。在www.google.com 解析一台主机（例如110.110.100.23）, 当请求发到该主机的时候， 通过nginx分发到不同的其他服务器主机上， 这样就缓解了当前主机的压力。</p>
<p>案例2:</p>
<p>域名解析只能解析到ip， 不能解析到对应到ip主机对应的某一个端口号<br>所以你在主机上跑了一个应用是非80端口的，那么你访问你的应用的时候就要域名加上端口才能访问到。</p>
<p>例如:www.daliandaxue.cn:8443,那么你想隐藏掉这个端口，就可以用Nginx反向代理来做。</p>
<p>###安装Nginx </p>
<p>####环境<br>操作系统Centos7.2</p>
<p>安装命令:<code>yum install nginx</code></p>
<p>启动命令:<code>nginx</code></p>
<p>优雅启动命令:<code>nginx -s reload</code></p>
<p>测试启动情况：<code>nginx -t</code></p>
<p>重启nginx：<code>nginx -s reload</code></p>
<p>针对案例2,需要添加一些配置</p>
<p>在/etc/nginx/nginx.conf 有两个关键的地方:</p>
<pre><code>user nginx; 改为 nginx root;
</code></pre><p>若不改动， 会在你启动nginx的时候出现权限不允许的error。</p>
<pre><code>include /etc/nginx/conf.d/*.conf;
</code></pre><p>这个inclde的意思就是你在conf.d 文件下的所有的 *.conf 文件， 都会在nginx启动的时候加载进去。</p>
<p>如果在/etc/nginx/下没有conf.d 文件夹，你可以创建conf.d文件夹。</p>
<p>下创建一个自己的.conf配置文件， 或者你可以直接修改/etc/nginx/nginx.conf文件。</p>
<p>我选择直接修改nginx.conf这个文件</p>
<p>修改后的nginx.conf文件（我添加了HTTPS 配置）<br>SSL configuration:</p>
<pre><code>user root;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;


include /usr/share/nginx/modules/*.conf;

events {
worker_connections 1024;
}

http {
log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;
  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;
  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;

access_log  /var/log/nginx/access.log  main;

sendfileon;
tcp_nopush  on;
tcp_nodelay on;
keepalive_timeout   65;
types_hash_max_size 2048;

include /etc/nginx/mime.types;
default_typeapplication/octet-stream;


include /etc/nginx/conf.d/*.conf;

server {
listen   80 default_server;
listen   [::]:80 default_server;
server_name  www.daliandaxue.cn;
root /usr/share/nginx/html;

include /etc/nginx/default.d/*.conf;

location / {
        rewrite ^(.*) https://$server_name$1 permanent;
}

error_page 404 /404.html;
location = /40x.html {
}

error_page 500 502 503 504 /50x.html;
location = /50x.html {
}
}


   server {
   listen   443 ssl http2 default_server;
   listen   [::]:443 ssl http2 default_server;
server_name  www.daliandaxue.cn;
root /usr/share/nginx/html;

        ssl on;
        ssl_certificate /etc/nginx/cert/214327484730823.pem;
        ssl_certificate_key /etc/nginx/cert/214327484730823.key;
        ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
        ssl_prefer_server_ciphers on;


include /etc/nginx/default.d/*.conf;

location / {
            proxy_pass  http://localhost:8443;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect off; 
            `### Most PHP, Python, Rails, Java App can use this header -&gt; https ###`
            proxy_set_header X-Forwarded-Proto  $scheme;
}

    error_page 404 /404.html;
    location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }
}
}
</code></pre><p>配置完nginx.conf 文件之后，执行nginx -s reload 就可以通过域名直接访问你的应用了。<br>其中的原理就是nginx 监听了服务器主机的80端口。 当有请求通过你设置server_name 访问时，nginx就可以把该请求location 到你的应用上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##Nginx:&lt;/p&gt;
&lt;p&gt;nginx 是一个用C语言编写的静态服务器。&lt;br&gt;我们可以用它来做反向代理。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017-renew</title>
    <link href="https://zyfand.github.io/2017/08/13/2017-renew-1/"/>
    <id>https://zyfand.github.io/2017/08/13/2017-renew-1/</id>
    <published>2017-08-13T14:17:55.000Z</published>
    <updated>2017-08-13T15:23:00.428Z</updated>
    
    <content type="html"><![CDATA[<p>#2017,下半年小目标<br><img src="http://ouk8myx67.bkt.clouddn.com/renew.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#2017,下半年小目标&lt;br&gt;&lt;img src=&quot;http://ouk8myx67.bkt.clouddn.com/renew.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JVM学习</title>
    <link href="https://zyfand.github.io/2017/08/12/JVM%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zyfand.github.io/2017/08/12/JVM学习/</id>
    <published>2017-08-12T14:56:08.000Z</published>
    <updated>2017-08-14T00:48:45.665Z</updated>
    
    <content type="html"><![CDATA[<p>#一、运行时数据区域<br><a id="more"></a></p>
<p>##程序计数器(Program Counter Register)<br><em>1、线程私有
</em>2、JAVA虚拟机规范中没有规定任何OutOfMemoryError</p>
<p>##JAVA虚拟机栈（Java Virtual Machine Stacks）<br>1、线程私有<br>2、存储局部变量表<br>3、操作数栈<br>4、动态链接<br>5、方法出口</p>
<p>##本地方法栈</p>
<p>##JAVA 堆</p>
<p>##方法去</p>
<p>##运行时常量池</p>
<p>##直接内存</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#一、运行时数据区域&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解决win7电脑网络连接异常的问题</title>
    <link href="https://zyfand.github.io/2016/09/13/%E8%A7%A3%E5%86%B3win7%E7%94%B5%E8%84%91%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E5%BC%82%E5%B8%B8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://zyfand.github.io/2016/09/13/解决win7电脑网络连接异常的问题/</id>
    <published>2016-09-13T12:35:40.000Z</published>
    <updated>2016-09-13T14:26:58.372Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>1.首先，打开电脑,网络连接图标出现红色的叉子,说明网络适配器有问题<br>2.打开网络共享中心-&gt;更改是配置设置-&gt;看到WLAN(或者叫无线连接)和本地连接。<br><img src="../../../../images/network.png" alt="使用本地图片"></p>
<p>3.先右键选择其中一个本地连接或者无线连接禁用它在启用<br>4.如果还是不好使的话,就打开设备管理器,查看一下网络设配器选项,下面的驱动是不是有成黄色感叹号的，有的话右键选中它禁用然后在启用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;1.首先，打开电脑,网络连接图标出现红色的叉子,说明网络适配器有问题&lt;br&gt;2.打开网络共享中心-&amp;gt;更改是配置设置-&amp;gt;看到WLAN(或者叫无线连接)和本地连接。&lt;br&gt;&lt;img src=&quot;../../../../images/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android学习之ListView的优化01</title>
    <link href="https://zyfand.github.io/2016/09/08/Android%E5%AD%A6%E4%B9%A0%E4%B9%8BListView/"/>
    <id>https://zyfand.github.io/2016/09/08/Android学习之ListView/</id>
    <published>2016-09-08T02:52:32.000Z</published>
    <updated>2017-08-12T08:49:53.389Z</updated>
    
    <content type="html"><![CDATA[<p>Listview的优化：<br>1.重用convertView<br>2.编写ViewHolder内部类<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public View getView(int i, View convertView, ViewGroup viewGroup) &#123;</div><div class="line">        ViewHolder viewHolder = null;</div><div class="line">        View view;</div><div class="line">        if(convertView==null)</div><div class="line">        &#123;</div><div class="line">            viewHolder = new ViewHolder();</div><div class="line">            view = View.inflate(mContext,R.layout.item_list,null);</div><div class="line">            viewHolder.mImageView = (ImageView) view.findViewById(R.id.id_iv);</div><div class="line">            viewHolder.mTextViewDes = (TextView) view.findViewById(R.id.id_tv_description);</div><div class="line">            viewHolder.getmTextViewPrice = (TextView) view.findViewById(R.id.id_tv_price);</div><div class="line">            view.setTag(viewHolder);</div><div class="line">        &#125;else&#123;</div><div class="line">            view = convertView;</div><div class="line">            viewHolder = (ViewHolder) view.getTag();</div><div class="line">        &#125;</div><div class="line">        viewHolder.mImageView.setImageResource(mList.get(i).image);</div><div class="line">        viewHolder.mTextViewDes.setText(mList.get(i).des);</div><div class="line">        viewHolder.getmTextViewPrice.setText(mList.get(i).price);</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">    class ViewHolder&#123;</div><div class="line">        public ImageView mImageView;</div><div class="line">        public TextView mTextViewDes;</div><div class="line">        public TextView getmTextViewPrice;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这样是listview华东起来更流畅，效果图如下:</p>
<p><img src="../../../../images/listview.gif" alt="使用本地图片"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Listview的优化：&lt;br&gt;1.重用convertView&lt;br&gt;2.编写ViewHolder内部类&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zyfand.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android学习之Activity</title>
    <link href="https://zyfand.github.io/2016/09/08/Android%E5%AD%A6%E4%B9%A0%E4%B9%8BActivity/"/>
    <id>https://zyfand.github.io/2016/09/08/Android学习之Activity/</id>
    <published>2016-09-08T02:15:33.000Z</published>
    <updated>2017-08-12T08:49:44.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在该博客上书写的第一篇博文"><a href="#在该博客上书写的第一篇博文" class="headerlink" title="在该博客上书写的第一篇博文"></a>在该博客上书写的第一篇博文</h2><p>读《第一行代码》的读书笔记</p>
<p>##活动<br><a id="more"></a></p>
<p>经过学习了解到android系统使用的是任务（Task）来管理活动，一个Task就是存放在栈里的活动中的集合。栈这种数据结构是先进后出的，在默认的启动模式下，我们每启动一个活动就它就会处于返回栈的栈顶的位置上。当我们按下back键时或者调用finish方法时，处于栈顶位置活动就会出栈，这时前一个入栈的活动就会处于栈顶的位置。系统会把处于栈顶的活动展示给用户。</p>
<p>###活动的的状态</p>
<p>###运行状态</p>
<p>活动处于栈顶状态，系统最不愿意回收处于运行状态的活动</p>
<p>####暂停状态</p>
<p>当活动不再处于栈顶位置时，但任然可见，这时活动就处于暂停状态</p>
<p>不处于栈顶为什么该活动还可见呢？那是因为不是每一个活动都需要占满整个屏幕，比如对话框式的活动就会仅仅占据屏幕的一部分，处于暂停状态的活动任然完全存活。</p>
<p>####停止状态</p>
<p>当一个活动不再处于栈顶的位置，并且不可见的时候就进入停止状态。系统任然会为该活动保存相应的状态和成员变量。</p>
<p>####销毁状态</p>
<p>当一个活动从返回栈中移除后变成了销毁状态，系统最倾向于销毁这种状态的活动。</p>
<p>###活动的生命周期</p>
<p>Activity类中定义七个回调的方法，覆盖了活动生命周期的每一个环节</p>
<p>onCreate()<br>在活动被创建的时候调用该方法，在该方法中完成一些初始化的操作，比如加载布局，绑定数据等操作。</p>
<p>onStart()<br>这个方法在活动又不可见变为可见的时候调用</p>
<p>onResume()<br>这个方法在准备好和用户进行交互的时候调用。此时活动一定处于返回栈的栈顶，并处于运行状态</p>
<p>onPause()<br>这个方法在系统准备去启动或者恢复一个活动的时候调用。我们通常会在这个方法中将一些消耗cpu资源释放掉，以及保存一些关键数据，但这个方法的执行速度一定要快，不然会影响到新的栈顶活动的使用。</p>
<p>onStop()<br>这个方法在活动完全不可见的时候调用。它还和onPause()方法的主要区别在于，如果启动的新活动是一个对话框的活动，那么onPause()方法会得到执行，而onStop()方法并不会执行。</p>
<p>onDestory()<br>这个方法在活动被销毁之前调用，之后活动的状态就变为销毁状态。</p>
<p>onRestart()<br>这个方法在活动由停止状态之前调用，也就是活动被重新启动了。</p>
<p>这七个方法是两两对应的（除了onRestart）</p>
<p>将活动分为三种生命周期</p>
<p>1.完整生存期<br>活动在onCreate() 和 onDestory() 方法之间所经历的，就是完整的生存周期</p>
<p>2.可见生命周期<br>onStart() 和 onStop方法之间所经历的，就是可见的生存周期</p>
<p>3.前台生命周期<br>onResume() 和 onPause() 方法之间所经历的，在这段生命周期内的活动可以和用户进行交互。此时活动处于与运行状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在该博客上书写的第一篇博文&quot;&gt;&lt;a href=&quot;#在该博客上书写的第一篇博文&quot; class=&quot;headerlink&quot; title=&quot;在该博客上书写的第一篇博文&quot;&gt;&lt;/a&gt;在该博客上书写的第一篇博文&lt;/h2&gt;&lt;p&gt;读《第一行代码》的读书笔记&lt;/p&gt;
&lt;p&gt;##活动&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zyfand.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>递归算法学习之蛙跳问题——01</title>
    <link href="https://zyfand.github.io/2016/06/15/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%9B%99%E8%B7%B3%E9%97%AE%E9%A2%98%E2%80%94%E2%80%9401/"/>
    <id>https://zyfand.github.io/2016/06/15/递归算法学习之蛙跳问题——01/</id>
    <published>2016-06-15T02:21:00.000Z</published>
    <updated>2016-09-07T12:24:34.915Z</updated>
    
    <content type="html"><![CDATA[<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。<br><a id="more"></a><br>public void jumpFloor(int n)<br>{<br>    if(n&lt;=0) return 0;<br>    else if(n&lt;=2) return n;<br>    else{<br>       return jumpFloor(n-1)+jumpFloor(n-2);<br>    }<br>}<br>用递归的方式来接到题目<br>台阶数目：1 2 3 4 5 6<br>跳法种数：1 2 3 5 8 13<br>所以这满足斐波拉契的公式所以可以用递归来处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法学习之递归算法学习之斐波拉契</title>
    <link href="https://zyfand.github.io/2016/06/15/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91/"/>
    <id>https://zyfand.github.io/2016/06/15/算法学习之递归算法学习之斐波拉契/</id>
    <published>2016-06-15T02:21:00.000Z</published>
    <updated>2017-08-12T08:50:11.621Z</updated>
    
    <content type="html"><![CDATA[<p>输出Fibonacci的第n项，要求时间复杂度要低<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public int  fibonacci(int n)</div><div class="line">&#123;</div><div class="line">if(n&lt;0) return 0;</div><div class="line">  if(n&lt;=2) return 1;</div><div class="line">  else&#123;</div><div class="line">      return fibonacci(n-1)+fibonacci(n-2);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>但是这种递归方法的时间复杂度太高</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public int fibonacci_01(int n)</div><div class="line">&#123;</div><div class="line">    if(n&lt;0) return 0;</div><div class="line">    else if((n&lt;=2) return 1;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">               int a = 1,b = 1,c = 0;</div><div class="line">       for(int i = 0;i&lt;=n;i++)</div><div class="line">       &#123;</div><div class="line">          c = a + b;</div><div class="line">          a = b;</div><div class="line">         b = c;</div><div class="line">       &#125;</div><div class="line">       return c;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样改变之后时间复杂度就变成了O(n)了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;输出Fibonacci的第n项，要求时间复杂度要低&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zyfand.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
